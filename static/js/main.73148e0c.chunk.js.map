{"version":3,"sources":["SeasonDisplay.js","Loader.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"8LAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAK,sBACLC,SAAU,OAEdC,OAAS,CACLF,KAAO,cACPC,SAAS,eAwBFE,EAZO,SAACC,GACnB,IATeC,EAAIC,EASbC,GATSF,EASUD,EAAMC,KATZC,GASiB,IAAIE,MAAOC,YARpC,GAAKH,EAAO,EACZD,EAAM,EAAI,SAAS,SAEnBA,EAAM,EAAI,SAAS,UAID,EAELP,EAAaS,GAA9BP,EAFsB,EAEtBA,KAAKC,EAFiB,EAEjBA,SACZ,OACI,sBAAKS,UAAS,yBAAoBH,GAAlC,UACI,mBAAGG,UAAS,oCAA+BT,EAA/B,WACZ,mCAAMD,KACN,mBAAGU,UAAS,qCAAgCT,EAAhC,eC3BlBU,EAAS,SAACP,GACZ,OACI,qBAAKM,UAAU,mBAAf,SACG,sBAAKA,UAAU,iBAAf,cAAkCN,EAAMQ,QAAxC,UAIXD,EAAOE,aAAe,CAClBD,QAAS,cAGED,QCPTG,E,4MACFC,MAAQ,CAACV,IAAK,KAAMW,aAAc,I,kEAEd,IAAD,OACXC,OAAOC,UAAUC,YAAYC,oBAC7B,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAACjB,IAAKgB,EAASE,OAAOC,cAChD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAACN,aAAcS,EAAIb,e,sCAK9C,OAAGc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAElC,gCACI,uBACA,0CAAaqB,KAAKX,MAAMC,oBAIhCU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAC/B,cAAC,EAAD,CAAeA,IAAOqB,KAAKX,MAAMV,MAErC,cAAC,EAAD,CAAQO,QAAQ,yC,+BAKvB,OAAO,sBAAKF,UAAU,cAAf,cAA+BgB,KAAKC,uB,GA3BjCC,IAAMC,WAgCxBC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.73148e0c.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    summer :{\n        text:\"Let's Hit the Beach\", \n        iconName :\"sun\" \n    },\n    winter : {\n        text:  \"It's chilly\",\n        iconName:\"snowflake\" \n    }\n};\n\nconst getSeason = (lat,month) =>{\n    if(month > 2 && month <9){\n        return lat > 0 ? 'summer':'winter';\n    }else{\n        return lat > 0 ? 'winter':'summer';\n    }\n}\n\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const {text,iconName} = seasonConfig[season]\n    return (\n        <div className={`season-display ${season}`}>    \n            <i className={`icon-left massive loading ${iconName} icon`} />\n            <h1> {text}</h1>\n            <i className={`icon-right massive loading ${iconName} icon`} />\n        </div>\n    );\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Loader = (props) =>{\n    return (\n        <div className=\"ui active dimmer\"> \n           <div className=\"ui text loader\"> {props.message} </div>\n        </div>\n    )};\n\nLoader.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Loader;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay'\nimport Loader from './Loader';\n\n\nclass App extends React.Component{\n    state = {lat :null, errorMessage: '' };\n\n    componentDidMount(){\n            window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({lat: position.coords.latitude}),\n            (err) => this.setState({errorMessage :err.message })\n        );\n    }\n    \n    renderContent(){\n        if(this.state.errorMessage && !this.state.lat){\n            return (\n                <div>\n                    <br />\n                    <h1> Error: {this.state.errorMessage}</h1>\n                </div>\n            );        \n        }\n        if(!this.state.errorMessage && this.state.lat){\n            return <SeasonDisplay lat = {this.state.lat} />\n        }\n        return <Loader message=\"Please accept the Location Request\" />;\n \n    }\n\n    render(){\n        return <div className=\"boarder red\"> {this.renderContent()}</div>;\n    }\n}\n\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n);\n"],"sourceRoot":""}